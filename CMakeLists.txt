# This project is designed to be built outside the source tree.
# File generated by Simon K. Warfield simon.warfield@childrens.harvard.edu
# with support from NIH grant RR021885.
cmake_minimum_required(VERSION 3.11 FATAL_ERROR)

# Use git tag to define VERSION
execute_process(COMMAND git "describe" "--tags"
  OUTPUT_VARIABLE GIT_REPO_VERSION_UNCLEANED
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+(\\.[0-9]+(\\.g[0-9a-f]+)?)?"
 GIT_REPO_VERSION  "${GIT_REPO_VERSION_UNCLEANED}")

project(gifticlib
        VERSION 0.0.1
        DESCRIPTION "Geometry format under the Neuroimaging Informatics Technology Initiative (NIfTI)."
        LANGUAGES C)

### Require out-of-source builds
file(TO_CMAKE_PATH "${PROJECT_BINARY_DIR}/CMakeLists.txt" LOC_PATH)
if(EXISTS "${LOC_PATH}")
    message(FATAL_ERROR "You cannot build in a source directory (or any directory with a CMakeLists.txt file). Please make a build subdirectory. Feel free to remove CMakeCache.txt and CMakeFiles.")
endif()

macro(set_if_not_defined var defaultvalue)
# Macro allowing to set a variable to its default value if not already defined.
# The default value is set with:
#  (1) if set, the value environment variable <var>.
#  (2) if set, the value of local variable variable <var>.
#  (3) if none of the above, the value passed as a parameter.
# Setting the optional parameter 'OBFUSCATE' will display 'OBFUSCATED' instead of the real value.
  set(_obfuscate FALSE)
  foreach(arg ${ARGN})
    if(arg STREQUAL "OBFUSCATE")
      set(_obfuscate TRUE)
    endif()
  endforeach()
  if(DEFINED ENV{${var}} AND NOT DEFINED ${var})
    set(_value "$ENV{${var}}")
    if(_obfuscate)
      set(_value "OBFUSCATED")
    endif()
    message(STATUS "Setting '${var}' variable with environment variable value '${_value}'")
    set(${var} $ENV{${var}})
  endif()
  if(NOT DEFINED ${var})
    set(_value "${defaultvalue}")
    if(_obfuscate)
      set(_value "OBFUSCATED")
    endif()
    message(STATUS "Setting '${var}' variable with default value '${_value}'")
    set(${var} "${defaultvalue}")
  endif()
endmacro()

macro(get_gifti_rpath)
# Prepare RPATH
file(RELATIVE_PATH _rel ${CMAKE_INSTALL_PREFIX}/${GIFTI_INSTALL_RUNTIME_DIR} ${CMAKE_INSTALL_PREFIX})
if(APPLE)
  set(_rpath "@loader_path/${_rel}")
else()
  set(_rpath "\$ORIGIN/${_rel}")
endif()
file(TO_NATIVE_PATH "${_rpath}/${GIFTI_INSTALL_LIBRARY_DIR}" message_RPATH)
endmacro()

macro(add_gifti_target_properties target)
  # set some default properties for targets in this project
  get_gifti_rpath()
  set_target_properties(${target} PROPERTIES
    MACOSX_RPATH ON
    SKIP_BUILD_RPATH OFF
    BUILD_WITH_INSTALL_RPATH OFF
    INSTALL_RPATH "${message_RPATH}"
    INSTALL_RPATH_USE_LINK_PATH ON
    PREFIX "${NIFTI_PACKAGE_PREFIX}")
endmacro()


# INSTALLATION SETTINGS


# NIFTI_install_choices
set_if_not_defined(USE_NIFTI2_CODE ON CACHE BOOL "Do not build NIFTI2 provided by NIFTI")
set_if_not_defined(USE_FSL_CODE ON CACHE BOOL "Do not build FSL provided by NIFTI")
set_if_not_defined(USE_CIFTI_CODE ON  CACHE BOOL "Do not build CIFTI provided by NIFTI")
set_if_not_defined(USE_NIFTICDF_CODE ON CACHE BOOL "Do not build NIFTICDF provided by NIFTI")
set_if_not_defined(NIFTI_USE_PACKAGING OFF CACHE BOOL "Do not use packaging from nifti when included as part of another package")
set_if_not_defined(NIFTI_BUILD_APPLICATIONS ON CACHE BOOL "Do not build applications provided by NIFTI")
if (NOT NIFTI_PACKAGE_PREFIX)
set(NIFTI_PACKAGE_PREFIX "" CACHE STRING "NIFTI package can be installed with a prefix (the same one is used for gifti).")
endif()
set(PACKAGE_NAME ${NIFTI_PACKAGE_PREFIX}GIFTI)
set(GIFTI_INSTALL_EXPORT_NAME ${PACKAGE_NAME}Targets)

# GIFTI install destinations
set_if_not_defined(GIFTI_INSTALL_RUNTIME_DIR ${CMAKE_INSTALL_PREFIX}/bin)
set_if_not_defined(GIFTI_INSTALL_LIBRARY_DIR ${CMAKE_INSTALL_PREFIX}/lib/${PACKAGE_NAME})
set_if_not_defined(GIFTI_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include/${PACKAGE_NAME})
set_if_not_defined(GIFTI_INSTALL_ARCHIVE_DIR ${CMAKE_INSTALL_PREFIX}/lib/${PACKAGE_NAME})

# Other settings
option(BUILD_SHARED_LIBS "Toggle building shared libraries." ON)
add_definitions(-DHAVE_ZLIB)

# Finding dependencies
find_package(ITK QUIET)
if(ITK_FOUND)
# ITK provides expat and zlib.
   include(${ITK_USE_FILE})
   set(EXPAT_LIBRARIES ITKEXPAT)
   set(ZLIB_LIBRARIES ITKznz)
   set(${NIFTI_PACKAGE_PREFIX} ITK)
else()
# Otherwise, get it from elsewhere.
  find_package(EXPAT REQUIRED)
  find_package(ZLIB REQUIRED)
endif()

find_package(${NIFTI_PACKAGE_PREFIX}NIFTI 3 QUIET)
if (NOT "${${NIFTI_PACKAGE_PREFIX}NIFTI_FOUND}")
### STEP 2 -- fetch nifti_clib immediately at configuration time, so add_subdirectory can be used.
  include(FetchContent)
  # If new or changed data is needed, add that data to the https://github.com/NIFTI-Imaging/nifti-test-data repo
  # make a new release, and then update the URL and hash (shasum -a 256 <downloaded tarball>).
  FetchContent_Declare( fetch_nifti_clib_git_repo
          GIT_REPOSITORY https://github.com/NIFTI-Imaging/nifti_clib
          GIT_TAG        v3.0.0 # or git <HASH> or git <branch>
          )
  FetchContent_GetProperties(fetch_nifti_clib_git_repo)
  if(NOT fetch_nifti_clib_git_repo_POPULATED)
      set(FETCHCONTENT_QUIET OFF)
      message(STATUS "Downloading nifti_clib from github ... please wait")
      FetchContent_Populate( fetch_nifti_clib_git_repo )
      message(STATUS "download complete.")
      add_subdirectory(${fetch_nifti_clib_git_repo_SOURCE_DIR} ${fetch_nifti_clib_git_repo_BINARY_DIR})
  endif()
endif()

# shared library API versioning -- NOT the same as the release version
set(GIFTI_SHAREDLIB_VERSION "0.0.0")
string( REGEX MATCH "^[0-9]+" GIFTI_SHAREDLIB_SOVERSION ${GIFTI_SHAREDLIB_VERSION})
set(GIFTI_LIBRARY_PROPERTIES VERSION ${GIFTI_SHAREDLIB_VERSION} SOVERSION ${GIFTI_SHAREDLIB_SOVERSION})


add_library(giftiio gifti_io.c gifti_xml.c)
set_target_properties(giftiio PROPERTIES
 ${GIFTI_LIBRARY_PROPERTIES}
 PUBLIC_HEADER "gifti_io.h;gifti_xml.h")
add_gifti_target_properties(giftiio)
target_link_libraries(giftiio PUBLIC ${EXPAT_LIBRARIES} ${ZLIB_LIBRARIES} NIFTI::nifti2)

add_executable(gifti_tool gifti_tool.c)
set_target_properties(gifti_tool PROPERTIES PUBLIC_HEADER "gifti_xml.h;gifti_io.h")
add_gifti_target_properties(gifti_tool)
target_link_libraries(gifti_tool PUBLIC giftiio  EXPAT::EXPAT ${ZLIB_LIBRARIES})

add_executable(gifti_test gifti_test.c)
set_target_properties(gifti_test PROPERTIES PUBLIC_HEADER gifti_test.h)
add_gifti_target_properties(gifti_test)
target_link_libraries(gifti_test giftiio)


# binaries
install(TARGETS giftiio gifti_tool gifti_test
    EXPORT ${GIFTI_INSTALL_EXPORT_NAME}
    RUNTIME DESTINATION ${GIFTI_INSTALL_RUNTIME_DIR} COMPONENT Runtime
    LIBRARY DESTINATION ${GIFTI_INSTALL_LIBRARY_DIR} COMPONENT Libraries
    PUBLIC_HEADER DESTINATION ${GIFTI_INSTALL_LIBRARY_DIR} COMPONENT Development
    ARCHIVE DESTINATION ${GIFTI_INSTALL_ARCHIVE_DIR} COMPONENT Libraries)


# For package this project:
include(CMakePackageConfigHelpers)
set(CONFIG_SETUP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME})
set(ConfigPackageLocation share/cmake/${PACKAGE_NAME})

write_basic_package_version_file(
      ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}ConfigVersion.cmake
      VERSION ${GIT_REPO_VERSION}
      COMPATIBILITY AnyNewerVersion
)

configure_file(cmake/GIFTIConfig.cmake
      ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}Config.cmake
      COPYONLY
      )

install(EXPORT ${GIFTI_INSTALL_EXPORT_NAME}
      NAMESPACE     "GIFTI::"
      FILE GIFTITargets.cmake
      DESTINATION   ${ConfigPackageLocation}
      )

install(FILES
         ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}Config.cmake
         ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}ConfigVersion.cmake
      DESTINATION   ${ConfigPackageLocation}
)
