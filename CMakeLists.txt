# This project is designed to be built outside the source tree.
# File generated by Simon K. Warfield simon.warfield@childrens.harvard.edu
# with support from NIH grant RR021885.
cmake_minimum_required(VERSION 3.11 FATAL_ERROR)

# Use git tag to define VERSION
execute_process(COMMAND git "describe" "--tags"
  OUTPUT_VARIABLE GIT_REPO_VERSION_UNCLEANED
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  ERROR_QUIET)
string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+(\\.[0-9]+(\\.g[0-9a-f]+)?)?"
 GIT_REPO_VERSION  "${GIT_REPO_VERSION_UNCLEANED}")

if (GIT_REPO_VERSION STREQUAL "")
  # Conda build will have environment var but no git repo.
  if (DEFINED ENV{GIT_DESCRIBE_TAG})
    message("TAG:" ENV{GIT_DESCRIBE_TAG})
    set(GIT_REPO_VERSION ENV{GIT_DESCRIBE_TAG})
  else()
    set(GIT_REPO_VERSION "99.99.99")
  endif()
endif()

project(gifticlib
        VERSION ${GIT_REPO_VERSION}
        DESCRIPTION "Geometry format under the Neuroimaging Informatics Technology Initiative (NIfTI)."
        LANGUAGES C)

### Require out-of-source builds
file(TO_CMAKE_PATH "${PROJECT_BINARY_DIR}/CMakeLists.txt" LOC_PATH)
if(EXISTS "${LOC_PATH}")
    message(FATAL_ERROR "You cannot build in a source directory (or any directory with a CMakeLists.txt file). Please make a build subdirectory. Feel free to remove CMakeCache.txt and CMakeFiles.")
endif()

# Add module directory
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)
# Include macros defined for this project.
include(gifti_macros)
option(TEST_GIFTI "Enable tests" ON)
if(${TEST_GIFTI})
    enable_testing()
endif()

# INSTALLATION SETTINGS

# NIFTI_install_choices
set_if_not_defined(USE_NIFTI2_CODE ON CACHE BOOL "Do not build NIFTI2 provided by NIFTI")
set_if_not_defined(USE_FSL_CODE ON CACHE BOOL "Do not build FSL provided by NIFTI")
set_if_not_defined(USE_CIFTI_CODE ON  CACHE BOOL "Do not build CIFTI provided by NIFTI")
set_if_not_defined(USE_NIFTICDF_CODE ON CACHE BOOL "Do not build NIFTICDF provided by NIFTI")
set_if_not_defined(NIFTI_USE_PACKAGING OFF CACHE BOOL "Do not use packaging from nifti when included as part of another package")
set_if_not_defined(NIFTI_BUILD_APPLICATIONS ON CACHE BOOL "Do not build applications provided by NIFTI")
if (NOT NIFTI_PACKAGE_PREFIX)
set(NIFTI_PACKAGE_PREFIX "" CACHE STRING "NIFTI package can be installed with a prefix (the same one is used for gifti).")
endif()
set(PACKAGE_NAME ${NIFTI_PACKAGE_PREFIX}GIFTI)
set(GIFTI_INSTALL_EXPORT_NAME ${PACKAGE_NAME}Targets)

# GIFTI install destinations
set_if_not_defined(GIFTI_INSTALL_BIN_DIR ${CMAKE_INSTALL_PREFIX}/bin)
set_if_not_defined(GIFTI_INSTALL_LIB_DIR ${CMAKE_INSTALL_PREFIX}/lib)
set_if_not_defined(GIFTI_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include/gifti)

# Other settings
option(BUILD_SHARED_LIBS "Toggle building shared libraries." ON)
add_definitions(-DHAVE_ZLIB)

set(EXPORT_NAMESPACE ${NIFTI_PACKAGE_PREFIX}GIFTI)
set(giftiio ${NIFTI_PACKAGE_PREFIX}giftiio)
set(gifti_tool ${NIFTI_PACKAGE_PREFIX}gifti_tool)
set(gifti_test ${NIFTI_PACKAGE_PREFIX}gifti_test)
set(NIFTI_2_LIB ${NIFTI_PACKAGE_PREFIX}NIFTI::${NIFTI_PACKAGE_PREFIX}nifti2)


# Finding dependencies
find_package(ITK QUIET)
if(ITK_FOUND)
# ITK provides expat and zlib.
   include(${ITK_USE_FILE})
   set(EXPAT_LIBRARIES ITKEXPAT)
   set(ZLIB_LIBRARIES ITKznz)
   set(${NIFTI_PACKAGE_PREFIX} ITK)
else()
# Otherwise, get it from elsewhere.
  include(FindEXPAT)
  find_package(ZLIB REQUIRED)
  ### STEP 2 -- fetch nifti_clib immediately at configuration time, so add_subdirectory can be used.
  include(FetchContent)
  # If new or changed data is needed, add that data to the https://github.com/NIFTI-Imaging/nifti-test-data repo
  # make a new release, and then update the URL and hash (shasum -a 256 <downloaded tarball>).
  FetchContent_Declare( fetch_nifti_clib_git_repo
          GIT_REPOSITORY https://github.com/leej3/nifti_clib.git
          # GIT_TAG        v3.0.0beta1 # or <HASH>
          GIT_TAG        2.8.9 # or <HASH>
          )
  FetchContent_GetProperties(fetch_nifti_clib_git_repo)


  if(NOT fetch_nifti_clib_git_repo_POPULATED)
      set(FETCHCONTENT_QUIET OFF)
      message(STATUS "Fetching nifti_clib targets")
      FetchContent_Populate(fetch_nifti_clib_git_repo)
      add_subdirectory(${fetch_nifti_clib_git_repo_SOURCE_DIR} ${fetch_nifti_clib_git_repo_BINARY_DIR})
  endif()
endif()

# shared library API versioning -- NOT the same as the release version
set(GIFTI_SHAREDLIB_VERSION "0.0.0")
string( REGEX MATCH "^[0-9]+" GIFTI_SHAREDLIB_SOVERSION ${GIFTI_SHAREDLIB_VERSION})
set(GIFTI_LIBRARY_PROPERTIES VERSION ${GIFTI_SHAREDLIB_VERSION} SOVERSION ${GIFTI_SHAREDLIB_SOVERSION})


add_library(giftiio gifti_io.c gifti_xml.c)
target_include_directories(giftiio PUBLIC
  $<INSTALL_INTERFACE:${GIFTI_INSTALL_LIB_DIR}>    
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
)

set_target_properties(giftiio PROPERTIES
 ${GIFTI_LIBRARY_PROPERTIES}
 PUBLIC_HEADER "gifti_io.h;gifti_xml.h")
add_gifti_target_properties(giftiio)
target_link_libraries(giftiio PUBLIC ${EXPAT_LIBRARIES} ${ZLIB_LIBRARIES} ${NIFTI_2_LIB})

add_executable(gifti_tool gifti_tool.c)
set_target_properties(gifti_tool PROPERTIES PUBLIC_HEADER "gifti_xml.h;gifti_io.h")
add_gifti_target_properties(gifti_tool)
target_link_libraries(gifti_tool PUBLIC giftiio  EXPAT::EXPAT ${ZLIB_LIBRARIES})

add_executable(gifti_test gifti_test.c)
set_target_properties(gifti_test PROPERTIES PUBLIC_HEADER gifti_test.h)
add_gifti_target_properties(gifti_test)
target_link_libraries(gifti_test giftiio)

# binaries
install(TARGETS giftiio gifti_tool gifti_test
    EXPORT ${GIFTI_INSTALL_EXPORT_NAME}
    RUNTIME DESTINATION ${GIFTI_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries
    LIBRARY DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries
    ARCHIVE DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT Development
    PUBLIC_HEADER DESTINATION ${GIFTI_INSTALL_INCLUDE_DIR} COMPONENT Development
    INCLUDES DESTINATION ${GIFTI_INSTALL_INCLUDE_DIR} COMPONENT Development
    )

# For packaging this project:
include(CMakePackageConfigHelpers)
set(CONFIG_SETUP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME})
set(ConfigPackageLocation share/cmake/${PACKAGE_NAME})

write_basic_package_version_file(
      ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}ConfigVersion.cmake
      VERSION ${GIT_REPO_VERSION}
      COMPATIBILITY AnyNewerVersion
)

configure_file(cmake/GIFTIConfig.cmake
      ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}Config.cmake
      COPYONLY
      )

install(EXPORT ${GIFTI_INSTALL_EXPORT_NAME}
      NAMESPACE     ${PACKAGE_NAME}::
      FILE GIFTITargets.cmake
      DESTINATION   ${ConfigPackageLocation}
      )

install(FILES
         ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}Config.cmake
         ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}ConfigVersion.cmake
      DESTINATION   ${ConfigPackageLocation}
)

#######################################################################
## Add the cpack configuration settings last
option(GIFTI_USE_PACKAGING "Configure the packaging options for GIFTI" OFF)
mark_as_advanced(GIFTI_USE_PACKAGING)
if(GIFTI_USE_PACKAGING)
  include(cmake/GIFTICPackConfig.cmake)
endif()

#
# Testing

# enable_testing() sets the following variable:
if(${CMAKE_TESTING_ENABLED})
  include(CTest)
  if(CMAKE_VERSION VERSION_LESS 3.11.0)
    # CMAKE VERSION 3.11.0 needed for fetching data with cmake
    message(
      FATAL_ERROR
        "ERROR:  The testing framework for gifti_clib requires CMake version 3.11.0 or greater"
      )
  endif()

  include(FetchContent) # fetch data a configure time to simplify tests If new
                        # or changed data is needed, add that data to the
                        # https://github.com/NIFTI-Imaging/nifti-test-data repo
                        # make a new release, and then update the URL and hash
                        # (shasum -a 256 <downloaded tarball>).
  fetchcontent_declare(
    gifti_test_data
    URL
    https://github.com/NIFTI-Imaging/gifti-test-data/archive/0.0.1.tar.gz
    URL_HASH
    SHA256=9b97e830ad27a82efcacb41ea3a7c573b34b7b3ca47e0c0bfb65b44f604199c2)
  fetchcontent_getproperties(gifti_test_data)
  set(FETCHCONTENT_QUIET OFF)
  fetchcontent_populate(gifti_test_data)
endif()

set(TEST_SCRIPT_DIR ${CMAKE_CURRENT_LIST_DIR}/regress_tests/cmake_test_scripts)
set(TEST_DATA ${gifti_test_data_SOURCE_DIR}/gifti_regress_data)
# Do all regression tests (add_test will only execute if TEST_GIFTI was set)
add_test(NAME gifti_ver COMMAND $<TARGET_FILE:gifti_tool> -gifti_ver)
add_test(NAME gifti_tool_ver COMMAND $<TARGET_FILE:gifti_tool> -ver)
add_test(NAME gifti_help COMMAND $<TARGET_FILE:gifti_tool> -help)
add_test(NAME gifti_gifti_hist COMMAND $<TARGET_FILE:gifti_tool> -gifti_hist)
add_test(NAME gifti_hist COMMAND $<TARGET_FILE:gifti_tool> -hist)

add_test(NAME gifti_disp_hdr
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -disp_hdr 
                 -infiles ${TEST_DATA}/anat0.nii)
add_test(NAME gifti_disp_nim
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -disp_nim 
                 -infiles ${TEST_DATA}/anat0.nii)
add_test(NAME gifti_disp_ext
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -disp_ext 
                 -infiles ${TEST_DATA}/anat0.nii)
add_test(NAME gifti_header_check
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -check_hdr 
                 -infiles ${TEST_DATA}/anat0.nii)
add_test(NAME gifti_nim_check
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -check_nim 
                 -infiles ${TEST_DATA}/anat0.nii)
add_test(NAME gifti_pial_short_verbose
        COMMAND $<TARGET_FILE:gifti_tool> 
                 -check_nim 
                 -infile ${TEST_DATA}/ascii.pial.short.gii)
add_test(NAME gifti_show_color_table_gifti
        COMMAND $<TARGET_FILE:gifti_tool> 
                -show_gifti
                -infile ${TEST_DATA}/color.table.gii)
add_test(NAME gifti_show_surfs
        COMMAND $<TARGET_FILE:gifti_tool> 
                -show_gifti
                -infile ${TEST_DATA}/b64gz.ts.3.gii)



if(UNIX) # unix needed to run shell scripts
 
 foreach(test_stubname no_data_flag no_updates_flag high_verbosity copy_surfs
  b64_check buf_size encode indent compress other_formats new_dsets fix_errors
  modify_and_compare approx label_table col_maj_1 col_maj_2 extern_data)
  
  add_test(
    NAME gifti_${test_stubname}
    COMMAND bash -xeu ${TEST_SCRIPT_DIR}/${test_stubname}.sh
            $<TARGET_FILE:gifti_tool>
            ${TEST_DATA})
  endforeach()
endif()
