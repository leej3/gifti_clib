# This project is designed to be built outside the source tree.
# File generated by Simon K. Warfield simon.warfield@childrens.harvard.edu
# with support from NIH grant RR021885.
cmake_minimum_required(VERSION 3.11 FATAL_ERROR)

# Use git tag to define VERSION
execute_process(COMMAND git "describe" "--tags"
  OUTPUT_VARIABLE GIT_REPO_VERSION_UNCLEANED
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  ERROR_QUIET)
string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+(\\.[0-9]+(\\.g[0-9a-f]+)?)?"
 GIT_REPO_VERSION  "${GIT_REPO_VERSION_UNCLEANED}")

if (GIT_REPO_VERSION STREQUAL "")
  # Conda build will have environment var but no git repo.
  if (DEFINED ENV{GIT_DESCRIBE_TAG})
    message("TAG:" ENV{GIT_DESCRIBE_TAG})
    set(GIT_REPO_VERSION ENV{GIT_DESCRIBE_TAG})
  else()
    set(GIT_REPO_VERSION "99.99.99")
  endif()
endif()

project(gifticlib
        VERSION ${GIT_REPO_VERSION}
        DESCRIPTION "Geometry format under the Neuroimaging Informatics Technology Initiative (NIfTI)."
        LANGUAGES C)

include(CMakeDependentOption)
# Add module directory
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)
include(gifti_macros)

set_property(GLOBAL PROPERTY installed_targets)

# INSTALLATION SETTINGS

# Find and use system installed dependencies
option(USE_SYSTEM_ITK "Search for a version of ITK installed on the system." OFF)
set_if_not_defined(USE_SYSTEM_NIFTI OFF)

# NIFTI_install_choices
set_if_not_defined(USE_NIFTI2_CODE ON CACHE BOOL "Do not build NIFTI2 provided by NIFTI")
set_if_not_defined(USE_FSL_CODE ON CACHE BOOL "Do not build FSL provided by NIFTI")
set_if_not_defined(USE_CIFTI_CODE ON  CACHE BOOL "Do not build CIFTI provided by NIFTI")
set_if_not_defined(USE_NIFTICDF_CODE ON CACHE BOOL "Do not build NIFTICDF provided by NIFTI")
set_if_not_defined(NIFTI_USE_PACKAGING OFF CACHE BOOL "Do not use packaging from nifti when included as part of another package")
set_if_not_defined(NIFTI_BUILD_APPLICATIONS ON CACHE BOOL "Do not build applications provided by NIFTI")
if (NOT NIFTI_PACKAGE_PREFIX)
set(NIFTI_PACKAGE_PREFIX "" CACHE STRING "NIFTI package can be installed with a prefix (the same one is used for gifti).")
endif()

set_if_not_defined(PACKAGE_NAME ${NIFTI_PACKAGE_PREFIX}GIFTI)
set_if_not_defined(GIFTI_INSTALL_EXPORT_NAME ${PACKAGE_NAME}Targets)
set_if_not_defined(GIFTI_BUILD_APPLICATIONS OFF)

# GIFTI install destinations
set_if_not_defined(GIFTI_INSTALL_BIN_DIR bin)
set_if_not_defined(GIFTI_INSTALL_LIB_DIR lib)
set_if_not_defined(GIFTI_INSTALL_INCLUDE_DIR include)

# Other settings
option(BUILD_SHARED_LIBS "Toggle building shared libraries." ON)
add_definitions(-DHAVE_ZLIB)
# Testing also requires GIFTI_BUILD_APPLICATIONS to be set to ON
set_if_not_defined(GIFTI_BUILD_TESTING "${BUILD_TESTING}")

# Finding dependencies
if(USE_SYSTEM_ITK)
  find_package(ITK QUIET)
endif()

if(ITK_FOUND OR TARGET ITKEXPAT)
  # ITK is found or driving the build and provides expat and zlib.
   include(${ITK_USE_FILE})
   set(EXPAT_LIBRARIES ITKEXPAT)
   set(ZLIB_LIBRARIES ITKznz)
   set(GIFTI_INSTALL_EXPORT_NAME ${ITK3P_INSTALL_EXPORT_NAME})
   set(${NIFTI_PACKAGE_PREFIX} ITK)
   set(GIFTI_BUILD_APPLICATIONS OFF)
else()
# Otherwise, get it from elsewhere.
  find_package(EXPAT REQUIRED)
  find_package(ZLIB REQUIRED)
  if(USE_SYSTEM_NIFTI)
    find_package(NIFTI REQUIRED)
  elseif(TARGET ITKniftiio)
    # ITK provides ITKniftiio
  else()
    ### STEP 2 -- fetch nifti_clib immediately at configuration time, so add_subdirectory can be used.
    include(FetchContent)
    # If new or changed data is needed, add that data to the https://github.com/NIFTI-Imaging/nifti-test-data repo
    # make a new release, and then update the URL and hash (shasum -a 256 <downloaded tarball>).
    # In order to make changes and use them immediately in an downstream one can run cmake
    # with the setting -DFETCHCONTENT_SOURCE_DIR_FETCH_NIFTI_CLIB_GIT_REPO=<path_to_nifti_codebase>
    FetchContent_Declare( fetch_nifti_clib_git_repo
            GIT_REPOSITORY https://github.com/NIFTI-Imaging/nifti_clib.git
            GIT_TAG        master # or <HASH>
            # SOURCE_DIR     ${CMAKE_CURRENT_LIST_DIR}/nifti_clib_download # <- not standard,  remove this line to download in binary tree
            )
    FetchContent_GetProperties(fetch_nifti_clib_git_repo)
    # Add a check to see if ITKniftiio has already been created
    if(NOT fetch_nifti_clib_git_repo_POPULATED)
        set(FETCHCONTENT_QUIET OFF)
        message(STATUS "Fetching nifti_clib targets")
        FetchContent_Populate(fetch_nifti_clib_git_repo)
        add_subdirectory(${fetch_nifti_clib_git_repo_SOURCE_DIR} ${fetch_nifti_clib_git_repo_BINARY_DIR})

    endif()
  endif()
endif()

# shared library API versioning -- NOT the same as the release version
set(GIFTI_SHAREDLIB_VERSION "0.0.0")
string( REGEX MATCH "^[0-9]+" GIFTI_SHAREDLIB_SOVERSION ${GIFTI_SHAREDLIB_VERSION})
set(GIFTI_LIBRARY_PROPERTIES VERSION ${GIFTI_SHAREDLIB_VERSION} SOVERSION ${GIFTI_SHAREDLIB_SOVERSION})

set(GIFTICLIB_NAME ${NIFTI_PACKAGE_PREFIX}giftiio)

add_gifti_library(${GIFTICLIB_NAME} gifti_io.c gifti_xml.c)
set_target_properties(${GIFTICLIB_NAME} PROPERTIES
 ${GIFTI_LIBRARY_PROPERTIES}
 PUBLIC_HEADER "gifti_io.h;gifti_xml.h")
target_compile_definitions(${GIFTICLIB_NAME} PUBLIC $<$<NOT:$<BOOL:${USE_NIFTI2_CODE}>>:"USE_NIFTI_VERSION_1">)
target_link_libraries(
  ${GIFTICLIB_NAME} 
    PUBLIC
      $<$<NOT:$<BOOL:${USE_NIFTI2_CODE}>>:$<TARGET_NAME_IF_EXISTS:NIFTI::niftiio>> 
      $<$<NOT:$<BOOL:${USE_NIFTI2_CODE}>>:$<TARGET_NAME_IF_EXISTS:${NIFTI_PACKAGE_PREFIX}niftiio>> 
      $<$<BOOL:${USE_NIFTI2_CODE}>:$<TARGET_NAME_IF_EXISTS:NIFTI::nifti2>>
      $<$<BOOL:${USE_NIFTI2_CODE}>:$<TARGET_NAME_IF_EXISTS:$<TARGET_NAME_IF_EXISTS:${NIFTI_PACKAGE_PREFIX}nifti2>>>
      ${EXPAT_LIBRARIES} 
      ${ZLIB_LIBRARIES}
      )

if(GIFTI_BUILD_APPLICATIONS)
add_gifti_executable(gifti_tool gifti_tool.c)
set_target_properties(gifti_tool PROPERTIES PUBLIC_HEADER "gifti_xml.h;gifti_io.h")
target_link_libraries(gifti_tool PUBLIC ${GIFTICLIB_NAME}  ${EXPAT_LIBRARIES} ${ZLIB_LIBRARIES})

add_gifti_executable(gifti_test gifti_test.c)
set_target_properties(gifti_test PROPERTIES PUBLIC_HEADER gifti_test.h)
target_link_libraries(gifti_test ${GIFTICLIB_NAME})
endif()

get_property(installed_targets GLOBAL PROPERTY installed_targets)
message("Installed_targets: ${installed_targets}")
if(GIFTI_INSTALL_NO_DEVELOPMENT)
  install(TARGETS ${installed_targets}
          EXPORT ${GIFTI_INSTALL_EXPORT_NAME}
          RUNTIME 
            COMPONENT RuntimeBinaries
            DESTINATION ${GIFTI_INSTALL_BIN_DIR} 
          ARCHIVE 
            DESTINATION ${GIFTI_INSTALL_LIB_DIR}
            COMPONENT RuntimeLibraries
          LIBRARY 
            DESTINATION ${GIFTI_INSTALL_LIB_DIR}
            COMPONENT RuntimeLibraries
          )
else()
  install(TARGETS ${installed_targets}
          EXPORT ${GIFTI_INSTALL_EXPORT_NAME}
          RUNTIME 
            COMPONENT RuntimeBinaries
            DESTINATION ${GIFTI_INSTALL_BIN_DIR} 
          ARCHIVE 
            DESTINATION ${GIFTI_INSTALL_LIB_DIR}
            COMPONENT RuntimeLibraries
          LIBRARY 
            DESTINATION ${GIFTI_INSTALL_LIB_DIR}
            COMPONENT RuntimeLibraries
          PUBLIC_HEADER
            DESTINATION ${GIFTI_INSTALL_INCLUDE_DIR}
          INCLUDES
            DESTINATION ${GIFTI_INSTALL_INCLUDE_DIR}
          )
  endif()


# For packaging this project:
if(NIFTI_PACKAGE_PREFIX STREQUAL "")
  include(CMakePackageConfigHelpers)
  set(CONFIG_SETUP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME})
  set(ConfigPackageLocation share/cmake/${PACKAGE_NAME})

  write_basic_package_version_file(
        ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}ConfigVersion.cmake
        VERSION ${GIT_REPO_VERSION}
        COMPATIBILITY AnyNewerVersion
  )

  configure_file(cmake/GIFTIConfig.cmake
        ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}Config.cmake
        COPYONLY
        )
  install(EXPORT ${GIFTI_INSTALL_EXPORT_NAME}
       NAMESPACE     ${PACKAGE_NAME}::
       FILE GIFTITargets.cmake
       DESTINATION   ${ConfigPackageLocation}
       )

  install(FILES
           ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}Config.cmake
           ${CONFIG_SETUP_DIR}/${PACKAGE_NAME}ConfigVersion.cmake
        DESTINATION   ${ConfigPackageLocation}
  )
  #######################################################################
  ## Add the cpack configuration settings last
  option(GIFTI_USE_PACKAGING "Configure the packaging options for GIFTI" OFF)
  mark_as_advanced(GIFTI_USE_PACKAGING)
  if(GIFTI_USE_PACKAGING)
    include(cmake/GIFTICPackConfig.cmake)
  endif()
endif()

#
# Testing
if(GIFTI_BUILD_TESTING AND GIFTI_BUILD_APPLICATIONS)
  include(CTest)
  if(DOWNLOAD_TEST_DATA)
  if(CMAKE_VERSION VERSION_LESS 3.11.0)
    # CMAKE VERSION 3.11.0 needed for fetching data with cmake
    message(
      FATAL_ERROR
        "ERROR:  The testing framework for gifti_clib requires CMake version 3.11.0 or greater"
      )
  endif()

  include(FetchContent) # fetch data a configure time to simplify tests If new
                        # or changed data is needed, add that data to the
                        # https://github.com/NIFTI-Imaging/gifti-test-data repo
                        # make a new release, and then update the URL and hash
                        # (shasum -a 256 <downloaded tarball>).
  fetchcontent_declare(
    gifti_test_data
    URL
    https://github.com/NIFTI-Imaging/gifti-test-data/archive/0.0.1.tar.gz
    URL_HASH
    SHA256=9b97e830ad27a82efcacb41ea3a7c573b34b7b3ca47e0c0bfb65b44f604199c2)
  fetchcontent_getproperties(gifti_test_data)
    if(NOT gifti_test_data_POPULATED)
      set(FETCHCONTENT_QUIET OFF)
      FetchContent_Populate( gifti_test_data )
    endif()
  endif()
endif()

set(TEST_SCRIPT_DIR ${CMAKE_CURRENT_LIST_DIR}/regress_tests/cmake_test_scripts)
set(TEST_DATA ${gifti_test_data_SOURCE_DIR}/gifti_regress_data)
# Do all regression tests (add_test will only execute if TEST_GIFTI was set)
add_test(NAME gifti_ver COMMAND $<TARGET_FILE:gifti_tool> -gifti_ver)
add_test(NAME gifti_tool_ver COMMAND $<TARGET_FILE:gifti_tool> -ver)
add_test(NAME gifti_help COMMAND $<TARGET_FILE:gifti_tool> -help)
add_test(NAME gifti_gifti_hist COMMAND $<TARGET_FILE:gifti_tool> -gifti_hist)
add_test(NAME gifti_hist COMMAND $<TARGET_FILE:gifti_tool> -hist)

add_test(NAME gifti_disp_hdr
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -disp_hdr 
                 -infiles ${TEST_DATA}/anat0.nii)
set_tests_properties( gifti_disp_hdr PROPERTIES LABELS NEEDS_DATA)
add_test(NAME gifti_disp_nim
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -disp_nim 
                 -infiles ${TEST_DATA}/anat0.nii)
set_tests_properties( gifti_disp_nim PROPERTIES LABELS NEEDS_DATA)
add_test(NAME gifti_disp_ext
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -disp_ext 
                 -infiles ${TEST_DATA}/anat0.nii)
set_tests_properties( gifti_disp_ext PROPERTIES LABELS NEEDS_DATA)
add_test(NAME gifti_header_check
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -check_hdr 
                 -infiles ${TEST_DATA}/anat0.nii)
set_tests_properties( gifti_header_check PROPERTIES LABELS NEEDS_DATA)
add_test(NAME gifti_nim_check
         COMMAND $<TARGET_FILE:gifti_tool> 
                 -check_nim 
                 -infiles ${TEST_DATA}/anat0.nii)
set_tests_properties( gifti_nim_check PROPERTIES LABELS NEEDS_DATA)
add_test(NAME gifti_pial_short_verbose
        COMMAND $<TARGET_FILE:gifti_tool> 
                 -check_nim 
                 -infile ${TEST_DATA}/ascii.pial.short.gii)
set_tests_properties( gifti_pial_short_verbose PROPERTIES LABELS NEEDS_DATA)
add_test(NAME gifti_show_color_table_gifti
        COMMAND $<TARGET_FILE:gifti_tool> 
                -show_gifti
                -infile ${TEST_DATA}/color.table.gii)
set_tests_properties( gifti_show_color_table_gifti PROPERTIES LABELS NEEDS_DATA)
add_test(NAME gifti_show_surfs
        COMMAND $<TARGET_FILE:gifti_tool> 
                -show_gifti
                -infile ${TEST_DATA}/b64gz.ts.3.gii)
set_tests_properties( gifti_show_surfs PROPERTIES LABELS NEEDS_DATA)

# Include test to verify linking in installed executables
# The test should only be added when applications are built, and no prefix string is set.
cmake_dependent_option(
  TEST_INSTALL "Add a test to check that linking to SO libraries occurs correctly during installation." ON
  "${NIFTI_PACKAGE_PREFIX};${GIFTI_BUILD_APPLICATIONS};${BUILD_SHARED_LIBS};${GIFTI_BUILD_TESTING}" OFF
)
# Test that installed linking works
if(TEST_INSTALL)
  add_test(
    NAME gifti_install_linking
    COMMAND sh ${TEST_SCRIPT_DIR}/install_linking_test.sh ${CMAKE_MAKE_PROGRAM}
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR} )
endif()


if(UNIX) # unix needed to run shell scripts
 
 foreach(test_stubname no_data_flag no_updates_flag high_verbosity copy_surfs
  b64_check buf_size encode indent compress other_formats new_dsets fix_errors
  modify_and_compare approx label_table col_maj_1 col_maj_2 extern_data)
  
  add_test(
    NAME gifti_${test_stubname}
    COMMAND bash -xeu ${TEST_SCRIPT_DIR}/${test_stubname}.sh
            $<TARGET_FILE:gifti_tool>
            ${TEST_DATA})
  set_tests_properties( gifti_${test_stubname} PROPERTIES LABELS NEEDS_DATA)
  endforeach()
endif()